
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26+1 (git sha1 b1a011138, x86_64-w64-mingw32-g++ 9.2.1 -Os)


-- Running command `read_verilog -sv ../design/module_7_segments.v ../design/module_arithmetic_fsm.v ../design/module_bin_to_bcd.v ../design/module_keyboard.v ../design/module_top_module.v ../design/module_col_shift_register.sv ../design/module_freq_divider.sv ../design/module_fsm_controller.sv ../design/module_keycode_generator.sv ; synth_gowin -top top_module -json demo.json' --

1. Executing Verilog-2005 frontend: ../design/module_7_segments.v
Parsing SystemVerilog input from `../design/module_7_segments.v' to AST representation.
Generating RTLIL representation for module `\module_7_segments'.
Note: Assuming pure combinatorial block at ../design/module_7_segments.v:44.5-70.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ../design/module_7_segments.v:73.5-88.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../design/module_arithmetic_fsm.v
Parsing SystemVerilog input from `../design/module_arithmetic_fsm.v' to AST representation.
Generating RTLIL representation for module `\arithmetic_fsm'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../design/module_bin_to_bcd.v
Parsing SystemVerilog input from `../design/module_bin_to_bcd.v' to AST representation.
Generating RTLIL representation for module `\module_bin_to_bcd'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ../design/module_keyboard.v
Parsing SystemVerilog input from `../design/module_keyboard.v' to AST representation.
Generating RTLIL representation for module `\teclado_matricial'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ../design/module_top_module.v
Parsing SystemVerilog input from `../design/module_top_module.v' to AST representation.
Generating RTLIL representation for module `\top_module'.
../design/module_top_module.v:28: Warning: Identifier `\clk' is implicitly declared.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ../design/module_col_shift_register.sv
Parsing SystemVerilog input from `../design/module_col_shift_register.sv' to AST representation.
Generating RTLIL representation for module `\col_shift_register'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ../design/module_freq_divider.sv
Parsing SystemVerilog input from `../design/module_freq_divider.sv' to AST representation.
Generating RTLIL representation for module `\freq_divider'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ../design/module_fsm_controller.sv
Parsing SystemVerilog input from `../design/module_fsm_controller.sv' to AST representation.
Generating RTLIL representation for module `\fsm_controller'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ../design/module_keycode_generator.sv
Parsing SystemVerilog input from `../design/module_keycode_generator.sv' to AST representation.
Generating RTLIL representation for module `\keycode_generator'.
Successfully finished Verilog frontend.

10. Executing SYNTH_GOWIN pass.

10.1. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\__APICULA_LUT5'.
Generating RTLIL representation for module `\__APICULA_LUT6'.
Generating RTLIL representation for module `\__APICULA_LUT7'.
Generating RTLIL representation for module `\__APICULA_LUT8'.
Generating RTLIL representation for module `\MUX2'.
Generating RTLIL representation for module `\MUX2_LUT5'.
Generating RTLIL representation for module `\MUX2_LUT6'.
Generating RTLIL representation for module `\MUX2_LUT7'.
Generating RTLIL representation for module `\MUX2_LUT8'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFFE'.
Generating RTLIL representation for module `\DFFS'.
Generating RTLIL representation for module `\DFFSE'.
Generating RTLIL representation for module `\DFFR'.
Generating RTLIL representation for module `\DFFRE'.
Generating RTLIL representation for module `\DFFP'.
Generating RTLIL representation for module `\DFFPE'.
Generating RTLIL representation for module `\DFFC'.
Generating RTLIL representation for module `\DFFCE'.
Generating RTLIL representation for module `\DFFN'.
Generating RTLIL representation for module `\DFFNE'.
Generating RTLIL representation for module `\DFFNS'.
Generating RTLIL representation for module `\DFFNSE'.
Generating RTLIL representation for module `\DFFNR'.
Generating RTLIL representation for module `\DFFNRE'.
Generating RTLIL representation for module `\DFFNP'.
Generating RTLIL representation for module `\DFFNPE'.
Generating RTLIL representation for module `\DFFNC'.
Generating RTLIL representation for module `\DFFNCE'.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\TBUF'.
Generating RTLIL representation for module `\IOBUF'.
Generating RTLIL representation for module `\TLVDS_OBUF'.
Generating RTLIL representation for module `\ODDR'.
Generating RTLIL representation for module `\ODDRC'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\ALU'.
Generating RTLIL representation for module `\RAM16S1'.
Generating RTLIL representation for module `\RAM16S2'.
Generating RTLIL representation for module `\RAM16S4'.
Generating RTLIL representation for module `\RAM16SDP1'.
Generating RTLIL representation for module `\RAM16SDP2'.
Generating RTLIL representation for module `\RAM16SDP4'.
Generating RTLIL representation for module `\SP'.
Generating RTLIL representation for module `\SPX9'.
Generating RTLIL representation for module `\SDP'.
Generating RTLIL representation for module `\SDPX9'.
Generating RTLIL representation for module `\DP'.
Generating RTLIL representation for module `\DPX9'.
Generating RTLIL representation for module `\rPLL'.
Generating RTLIL representation for module `\PLLVR'.
Generating RTLIL representation for module `\OSC'.
Generating RTLIL representation for module `\OSCZ'.
Generating RTLIL representation for module `\OSCF'.
Generating RTLIL representation for module `\OSCH'.
Successfully finished Verilog frontend.

10.2. Executing HIERARCHY pass (managing design hierarchy).

10.2.1. Analyzing design hierarchy..
Top module:  \top_module
Used module:     \keycode_generator
Used module:     \fsm_controller
Used module:     \col_shift_register
Used module:     \freq_divider
Used module:     \arithmetic_fsm
Used module:     \module_7_segments
Used module:     \module_bin_to_bcd
Parameter \DISPLAY_REFRESH = 27000

10.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\module_7_segments'.
Parameter \DISPLAY_REFRESH = 27000
Generating RTLIL representation for module `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000'.
Note: Assuming pure combinatorial block at ../design/module_7_segments.v:44.5-70.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at ../design/module_7_segments.v:73.5-88.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter \WIDTH = 4

10.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\module_bin_to_bcd'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100'.

10.2.4. Analyzing design hierarchy..
Top module:  \top_module
Used module:     \keycode_generator
Used module:     \fsm_controller
Used module:     \col_shift_register
Used module:     \freq_divider
Used module:     \arithmetic_fsm
Used module:     $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000
Used module:     $paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100

10.2.5. Analyzing design hierarchy..
Top module:  \top_module
Used module:     \keycode_generator
Used module:     \fsm_controller
Used module:     \col_shift_register
Used module:     \freq_divider
Used module:     \arithmetic_fsm
Used module:     $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000
Used module:     $paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100
Removing unused module `\teclado_matricial'.
Removing unused module `\module_bin_to_bcd'.
Removing unused module `\module_7_segments'.
Removed 3 unused modules.
Warning: Resizing cell port top_module.u_bin_to_bcd.bin_i from 12 bits to 4 bits.

10.3. Executing PROC pass (convert processes to netlists).

10.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ALU.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$277'.
Cleaned up 1 empty switch.

10.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273 in module DFFNCE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$271 in module DFFNC.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269 in module DFFNPE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$267 in module DFFNP.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$265 in module DFFNRE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$263 in module DFFNR.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$261 in module DFFNSE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$259 in module DFFNS.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253 in module DFFCE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$251 in module DFFC.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249 in module DFFPE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$247 in module DFFP.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$245 in module DFFRE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$243 in module DFFR.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$241 in module DFFSE.
Marked 1 switch rules as full_case in process $proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$239 in module DFFS.
Marked 1 switch rules as full_case in process $proc$../design/module_keycode_generator.sv:10$51 in module keycode_generator.
Marked 3 switch rules as full_case in process $proc$../design/module_fsm_controller.sv:0$48 in module fsm_controller.
Marked 1 switch rules as full_case in process $proc$../design/module_fsm_controller.sv:21$47 in module fsm_controller.
Marked 2 switch rules as full_case in process $proc$../design/module_freq_divider.sv:10$43 in module freq_divider.
Marked 1 switch rules as full_case in process $proc$../design/module_col_shift_register.sv:9$41 in module col_shift_register.
Marked 1 switch rules as full_case in process $proc$../design/module_bin_to_bcd.v:23$340 in module $paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.
Marked 1 switch rules as full_case in process $proc$../design/module_7_segments.v:73$331 in module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Removed 1 dead cases from process $proc$../design/module_7_segments.v:44$330 in module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Marked 1 switch rules as full_case in process $proc$../design/module_7_segments.v:44$330 in module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Marked 1 switch rules as full_case in process $proc$../design/module_7_segments.v:33$326 in module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Marked 2 switch rules as full_case in process $proc$../design/module_7_segments.v:18$321 in module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Marked 2 switch rules as full_case in process $proc$../design/module_arithmetic_fsm.v:52$15 in module arithmetic_fsm.
Removed 1 dead cases from process $proc$../design/module_arithmetic_fsm.v:0$13 in module arithmetic_fsm.
Marked 4 switch rules as full_case in process $proc$../design/module_arithmetic_fsm.v:0$13 in module arithmetic_fsm.
Marked 1 switch rules as full_case in process $proc$../design/module_arithmetic_fsm.v:19$12 in module arithmetic_fsm.
Removed a total of 2 dead cases.

10.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 17 redundant assignments.
Promoted 37 assignments to connections.

10.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$274'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$272'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$270'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$268'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$266'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$264'.
  Set init value: \Q = 1'0
Found init rule in `\DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$262'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$260'.
  Set init value: \Q = 1'1
Found init rule in `\DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$258'.
  Set init value: \Q = 1'0
Found init rule in `\DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$256'.
  Set init value: \Q = 1'0
Found init rule in `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$254'.
  Set init value: \Q = 1'0
Found init rule in `\DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$252'.
  Set init value: \Q = 1'0
Found init rule in `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$250'.
  Set init value: \Q = 1'1
Found init rule in `\DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$248'.
  Set init value: \Q = 1'1
Found init rule in `\DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$246'.
  Set init value: \Q = 1'0
Found init rule in `\DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$242'.
  Set init value: \Q = 1'1
Found init rule in `\DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$240'.
  Set init value: \Q = 1'1
Found init rule in `\DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$238'.
  Set init value: \Q = 1'0
Found init rule in `\DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$236'.
  Set init value: \Q = 1'0

10.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \CLEAR in `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273'.
Found async reset \CLEAR in `\DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$271'.
Found async reset \PRESET in `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269'.
Found async reset \PRESET in `\DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$267'.
Found async reset \CLEAR in `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253'.
Found async reset \CLEAR in `\DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$251'.
Found async reset \PRESET in `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249'.
Found async reset \PRESET in `\DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$247'.
Found async reset \rst in `\fsm_controller.$proc$../design/module_fsm_controller.sv:21$47'.
Found async reset \rst in `\freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
Found async reset \rst in `\col_shift_register.$proc$../design/module_col_shift_register.sv:9$41'.
Found async reset \rst_i in `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:23$340'.
Found async reset \rst_i in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:33$326'.
Found async reset \rst_i in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
Found async reset \rst in `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
Found async reset \rst in `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:19$12'.

10.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~31 debug messages>

10.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$277'.
Creating decoders for process `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$274'.
Creating decoders for process `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$272'.
Creating decoders for process `\DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$271'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$270'.
Creating decoders for process `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$268'.
Creating decoders for process `\DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$267'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$266'.
Creating decoders for process `\DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$265'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$264'.
Creating decoders for process `\DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$263'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$262'.
Creating decoders for process `\DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$261'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$260'.
Creating decoders for process `\DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$259'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$258'.
Creating decoders for process `\DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$257'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$256'.
Creating decoders for process `\DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$255'.
Creating decoders for process `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$254'.
Creating decoders for process `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$252'.
Creating decoders for process `\DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$251'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$250'.
Creating decoders for process `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$248'.
Creating decoders for process `\DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$247'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$246'.
Creating decoders for process `\DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$245'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$244'.
Creating decoders for process `\DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$243'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$242'.
Creating decoders for process `\DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$240'.
Creating decoders for process `\DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$239'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$238'.
Creating decoders for process `\DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$237'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$236'.
Creating decoders for process `\DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$235'.
Creating decoders for process `\keycode_generator.$proc$../design/module_keycode_generator.sv:10$51'.
     1/1: $0\key_code[3:0]
Creating decoders for process `\fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
     1/5: $3\next_state[1:0]
     2/5: $2\next_state[1:0]
     3/5: $1\next_state[1:0]
     4/5: $2\key_pressed[0:0]
     5/5: $1\row_capture[3:0]
Creating decoders for process `\fsm_controller.$proc$../design/module_fsm_controller.sv:21$47'.
     1/2: $0\current_state[1:0]
     2/2: $0\key_pressed[0:0]
Creating decoders for process `\freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
     1/2: $0\clk_divider_counter[15:0]
     2/2: $0\slow_clk[0:0]
Creating decoders for process `\col_shift_register.$proc$../design/module_col_shift_register.sv:9$41'.
     1/2: $0\column_index[1:0]
     2/2: $0\col_shift_reg[3:0]
Creating decoders for process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:23$340'.
     1/1: $0\bcd_o[15:0]
Creating decoders for process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
Creating decoders for process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:73$331'.
     1/1: $1\catodo_o[6:0]
Creating decoders for process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:44$330'.
     1/2: $1\digito_o[3:0]
     2/2: $1\anodo_o[3:0]
Creating decoders for process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:33$326'.
     1/1: $1\en_conmutador[1:0]
Creating decoders for process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
     1/2: $0\cuenta_salida[14:0]
     2/2: $0\en_conmutador[1:0]
Creating decoders for process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
     1/2: $0\sum_result[12:0]
     2/2: $0\stored_result[12:0]
Creating decoders for process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:0$13'.
     1/4: $4\next_state[1:0]
     2/4: $3\next_state[1:0]
     3/4: $2\next_state[1:0]
     4/4: $1\next_state[1:0]
Creating decoders for process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:19$12'.
     1/1: $0\state[1:0]

10.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fsm_controller.\next_state' from process `\fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
No latch inferred for signal `\fsm_controller.\row_capture' from process `\fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
No latch inferred for signal `\fsm_controller.\key_pressed' from process `\fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
No latch inferred for signal `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.\unidades' from process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
No latch inferred for signal `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.\decenas' from process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
No latch inferred for signal `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.\centenas' from process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
No latch inferred for signal `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.\millares' from process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
No latch inferred for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\catodo_o' from process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:73$331'.
No latch inferred for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\anodo_o' from process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:44$330'.
No latch inferred for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\digito_o' from process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:44$330'.
No latch inferred for signal `\arithmetic_fsm.\next_state' from process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:0$13'.

10.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ALU.\C' using process `\ALU.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$277'.
  created direct connection (no actual register cell created).
Creating register for signal `\ALU.\S' using process `\ALU.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$277'.
  created direct connection (no actual register cell created).
Creating register for signal `\DFFNCE.\Q' using process `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273'.
  created $adff cell `$procdff$494' with negative edge clock and positive level reset.
Creating register for signal `\DFFNC.\Q' using process `\DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$271'.
  created $adff cell `$procdff$495' with negative edge clock and positive level reset.
Creating register for signal `\DFFNPE.\Q' using process `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269'.
  created $adff cell `$procdff$496' with negative edge clock and positive level reset.
Creating register for signal `\DFFNP.\Q' using process `\DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$267'.
  created $adff cell `$procdff$497' with negative edge clock and positive level reset.
Creating register for signal `\DFFNRE.\Q' using process `\DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$265'.
  created $dff cell `$procdff$498' with negative edge clock.
Creating register for signal `\DFFNR.\Q' using process `\DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$263'.
  created $dff cell `$procdff$499' with negative edge clock.
Creating register for signal `\DFFNSE.\Q' using process `\DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$261'.
  created $dff cell `$procdff$500' with negative edge clock.
Creating register for signal `\DFFNS.\Q' using process `\DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$259'.
  created $dff cell `$procdff$501' with negative edge clock.
Creating register for signal `\DFFNE.\Q' using process `\DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$257'.
  created $dff cell `$procdff$502' with negative edge clock.
Creating register for signal `\DFFN.\Q' using process `\DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$255'.
  created $dff cell `$procdff$503' with negative edge clock.
Creating register for signal `\DFFCE.\Q' using process `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253'.
  created $adff cell `$procdff$504' with positive edge clock and positive level reset.
Creating register for signal `\DFFC.\Q' using process `\DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$251'.
  created $adff cell `$procdff$505' with positive edge clock and positive level reset.
Creating register for signal `\DFFPE.\Q' using process `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249'.
  created $adff cell `$procdff$506' with positive edge clock and positive level reset.
Creating register for signal `\DFFP.\Q' using process `\DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$247'.
  created $adff cell `$procdff$507' with positive edge clock and positive level reset.
Creating register for signal `\DFFRE.\Q' using process `\DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$245'.
  created $dff cell `$procdff$508' with positive edge clock.
Creating register for signal `\DFFR.\Q' using process `\DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$243'.
  created $dff cell `$procdff$509' with positive edge clock.
Creating register for signal `\DFFSE.\Q' using process `\DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$241'.
  created $dff cell `$procdff$510' with positive edge clock.
Creating register for signal `\DFFS.\Q' using process `\DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$239'.
  created $dff cell `$procdff$511' with positive edge clock.
Creating register for signal `\DFFE.\Q' using process `\DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$237'.
  created $dff cell `$procdff$512' with positive edge clock.
Creating register for signal `\DFF.\Q' using process `\DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$235'.
  created $dff cell `$procdff$513' with positive edge clock.
Creating register for signal `\keycode_generator.\key_code' using process `\keycode_generator.$proc$../design/module_keycode_generator.sv:10$51'.
  created $dff cell `$procdff$514' with positive edge clock.
Creating register for signal `\fsm_controller.\key_pressed' using process `\fsm_controller.$proc$../design/module_fsm_controller.sv:21$47'.
  created $adff cell `$procdff$515' with positive edge clock and positive level reset.
Creating register for signal `\fsm_controller.\current_state' using process `\fsm_controller.$proc$../design/module_fsm_controller.sv:21$47'.
  created $adff cell `$procdff$516' with positive edge clock and positive level reset.
Creating register for signal `\freq_divider.\slow_clk' using process `\freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
  created $adff cell `$procdff$517' with positive edge clock and positive level reset.
Creating register for signal `\freq_divider.\clk_divider_counter' using process `\freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
  created $adff cell `$procdff$518' with positive edge clock and positive level reset.
Creating register for signal `\col_shift_register.\col_shift_reg' using process `\col_shift_register.$proc$../design/module_col_shift_register.sv:9$41'.
  created $adff cell `$procdff$519' with positive edge clock and positive level reset.
Creating register for signal `\col_shift_register.\column_index' using process `\col_shift_register.$proc$../design/module_col_shift_register.sv:9$41'.
  created $adff cell `$procdff$520' with positive edge clock and positive level reset.
Creating register for signal `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.\bcd_o' using process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:23$340'.
  created $adff cell `$procdff$521' with positive edge clock and negative level reset.
Creating register for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\en_conmutador' using process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:33$326'.
  created $adff cell `$procdff$522' with positive edge clock and negative level reset.
Creating register for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\cuenta_salida' using process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
  created $adff cell `$procdff$523' with positive edge clock and negative level reset.
Creating register for signal `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.\en_conmutador' using process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
  created $adff cell `$procdff$524' with positive edge clock and negative level reset.
Creating register for signal `\arithmetic_fsm.\sum_result' using process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
  created $adff cell `$procdff$525' with positive edge clock and positive level reset.
Creating register for signal `\arithmetic_fsm.\stored_result' using process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
  created $adff cell `$procdff$526' with positive edge clock and positive level reset.
Creating register for signal `\arithmetic_fsm.\state' using process `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:19$12'.
  created $adff cell `$procdff$527' with positive edge clock and positive level reset.

10.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

10.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ALU.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:661$277'.
Removing empty process `DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$274'.
Found and cleaned up 1 empty switch in `\DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273'.
Removing empty process `DFFNCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:535$273'.
Removing empty process `DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$272'.
Removing empty process `DFFNC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:515$271'.
Removing empty process `DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$270'.
Found and cleaned up 1 empty switch in `\DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269'.
Removing empty process `DFFNPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:496$269'.
Removing empty process `DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$268'.
Removing empty process `DFFNP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:476$267'.
Removing empty process `DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$266'.
Found and cleaned up 2 empty switches in `\DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$265'.
Removing empty process `DFFNRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:457$265'.
Removing empty process `DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$264'.
Found and cleaned up 1 empty switch in `\DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$263'.
Removing empty process `DFFNR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:437$263'.
Removing empty process `DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$262'.
Found and cleaned up 2 empty switches in `\DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$261'.
Removing empty process `DFFNSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:418$261'.
Removing empty process `DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$260'.
Found and cleaned up 1 empty switch in `\DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$259'.
Removing empty process `DFFNS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:398$259'.
Removing empty process `DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$258'.
Found and cleaned up 1 empty switch in `\DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$257'.
Removing empty process `DFFNE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:381$257'.
Removing empty process `DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$256'.
Removing empty process `DFFN.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:366$255'.
Removing empty process `DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$254'.
Found and cleaned up 1 empty switch in `\DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253'.
Removing empty process `DFFCE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:348$253'.
Removing empty process `DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$252'.
Removing empty process `DFFC.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:328$251'.
Removing empty process `DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$250'.
Found and cleaned up 1 empty switch in `\DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249'.
Removing empty process `DFFPE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:309$249'.
Removing empty process `DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$248'.
Removing empty process `DFFP.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:289$247'.
Removing empty process `DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$246'.
Found and cleaned up 2 empty switches in `\DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$245'.
Removing empty process `DFFRE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:270$245'.
Removing empty process `DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$243'.
Removing empty process `DFFR.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:250$243'.
Removing empty process `DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$242'.
Found and cleaned up 2 empty switches in `\DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$241'.
Removing empty process `DFFSE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:231$241'.
Removing empty process `DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$240'.
Found and cleaned up 1 empty switch in `\DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$239'.
Removing empty process `DFFS.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:211$239'.
Removing empty process `DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$238'.
Found and cleaned up 1 empty switch in `\DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$237'.
Removing empty process `DFFE.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:194$237'.
Removing empty process `DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:0$236'.
Removing empty process `DFF.$proc$C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_sim.v:179$235'.
Found and cleaned up 1 empty switch in `\keycode_generator.$proc$../design/module_keycode_generator.sv:10$51'.
Removing empty process `keycode_generator.$proc$../design/module_keycode_generator.sv:10$51'.
Found and cleaned up 3 empty switches in `\fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
Removing empty process `fsm_controller.$proc$../design/module_fsm_controller.sv:0$48'.
Removing empty process `fsm_controller.$proc$../design/module_fsm_controller.sv:21$47'.
Found and cleaned up 1 empty switch in `\freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
Removing empty process `freq_divider.$proc$../design/module_freq_divider.sv:10$43'.
Removing empty process `col_shift_register.$proc$../design/module_col_shift_register.sv:9$41'.
Removing empty process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:23$340'.
Removing empty process `$paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.$proc$../design/module_bin_to_bcd.v:15$332'.
Found and cleaned up 1 empty switch in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:73$331'.
Removing empty process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:73$331'.
Found and cleaned up 1 empty switch in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:44$330'.
Removing empty process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:44$330'.
Found and cleaned up 1 empty switch in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:33$326'.
Removing empty process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:33$326'.
Found and cleaned up 1 empty switch in `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
Removing empty process `$paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.$proc$../design/module_7_segments.v:18$321'.
Found and cleaned up 1 empty switch in `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
Removing empty process `arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:52$15'.
Found and cleaned up 4 empty switches in `\arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:0$13'.
Removing empty process `arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:0$13'.
Removing empty process `arithmetic_fsm.$proc$../design/module_arithmetic_fsm.v:19$12'.
Cleaned up 32 empty switches.

10.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module keycode_generator.
Optimizing module fsm_controller.
<suppressed ~4 debug messages>
Optimizing module freq_divider.
Optimizing module col_shift_register.
Optimizing module top_module.
Optimizing module $paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
<suppressed ~4 debug messages>
Optimizing module arithmetic_fsm.
<suppressed ~3 debug messages>

10.4. Executing FLATTEN pass (flatten design).
Deleting now unused module keycode_generator.
Deleting now unused module fsm_controller.
Deleting now unused module freq_divider.
Deleting now unused module col_shift_register.
Deleting now unused module $paramod\module_bin_to_bcd\WIDTH=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\module_7_segments\DISPLAY_REFRESH=s32'00000000000000000110100101111000.
Deleting now unused module arithmetic_fsm.
<suppressed ~7 debug messages>

10.5. Executing TRIBUF pass.

10.6. Executing DEMINOUT pass (demote inout ports to input or output).

10.7. Executing SYNTH pass.

10.7.1. Executing PROC pass (convert processes to netlists).

10.7.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.7.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10.7.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

10.7.1.4. Executing PROC_INIT pass (extract init attributes).

10.7.1.5. Executing PROC_ARST pass (detect async resets in processes).

10.7.1.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

10.7.1.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

10.7.1.8. Executing PROC_DLATCH pass (convert process syncs to latches).

10.7.1.9. Executing PROC_DFF pass (convert process syncs to FFs).

10.7.1.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

10.7.1.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.7.1.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 40 unused cells and 100 unused wires.
<suppressed ~53 debug messages>

10.7.4. Executing CHECK pass (checking for obvious problems).
Checking module top_module...
Warning: multiple conflicting drivers for top_module.\u_7_segments.en_conmutador [1]:
    port Q[1] of cell $flatten\u_7_segments.$procdff$522 ($adff)
    port Q[1] of cell $flatten\u_7_segments.$procdff$524 ($adff)
Warning: multiple conflicting drivers for top_module.\u_7_segments.en_conmutador [0]:
    port Q[0] of cell $flatten\u_7_segments.$procdff$522 ($adff)
    port Q[0] of cell $flatten\u_7_segments.$procdff$524 ($adff)
Warning: Wire top_module.\u_arithmetic_fsm.accumulate_enable is used but has no driver.
Warning: Wire top_module.\u_7_segments.clk is used but has no driver.
Found and reported 4 problems.

10.7.5. Executing OPT pass (performing simple optimizations).

10.7.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

10.7.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\u_arithmetic_fsm.$procmux$472.
    dead port 2/2 on $mux $flatten\u_arithmetic_fsm.$procmux$474.
    dead port 2/2 on $mux $flatten\u_arithmetic_fsm.$procmux$479.
    dead port 2/2 on $mux $flatten\u_arithmetic_fsm.$procmux$487.
Removed 4 multiplexer ports.
<suppressed ~10 debug messages>

10.7.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
    New ctrl vector for $pmux cell $flatten\u_arithmetic_fsm.$procmux$459: { $flatten\u_arithmetic_fsm.$procmux$462_CMP $flatten\u_arithmetic_fsm.$procmux$461_CMP $auto$opt_reduce.cc:134:opt_pmux$529 }
    New ctrl vector for $pmux cell $flatten\u_arithmetic_fsm.$procmux$489: { $flatten\u_arithmetic_fsm.$procmux$463_CMP $auto$opt_reduce.cc:134:opt_pmux$531 $flatten\u_arithmetic_fsm.$procmux$460_CMP }
  Optimizing cells in module \top_module.
Performed a total of 2 changes.

10.7.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.5.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

10.7.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.5.9. Rerunning OPT passes. (Maybe there is more to do..)

10.7.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

10.7.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.7.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.5.13. Executing OPT_DFF pass (perform DFF optimizations).

10.7.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.5.16. Finished OPT passes. (There is nothing left to do.)

10.7.6. Executing FSM pass (extract and optimize FSM).

10.7.6.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top_module.u_arithmetic_fsm.state as FSM state register:
    Circuit seems to be self-resetting.

10.7.6.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.7.6.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.7.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.6.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.7.6.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.7.6.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.7.6.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

10.7.7. Executing OPT pass (performing simple optimizations).

10.7.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

10.7.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.7.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\u_arithmetic_fsm.$procdff$527 ($adff) from module top_module (D = \u_arithmetic_fsm.next_state, Q = \u_arithmetic_fsm.state).
Adding EN signal on $flatten\u_arithmetic_fsm.$procdff$526 ($adff) from module top_module (D = $flatten\u_arithmetic_fsm.$0\stored_result[12:0], Q = \u_arithmetic_fsm.stored_result).
Adding EN signal on $flatten\u_arithmetic_fsm.$procdff$525 ($adff) from module top_module (D = $flatten\u_arithmetic_fsm.$0\sum_result[12:0], Q = \u_arithmetic_fsm.sum_result).
Adding EN signal on $flatten\u_7_segments.$procdff$524 ($adff) from module top_module (D = $flatten\u_7_segments.$add$../design/module_7_segments.v:25$324_Y [1:0], Q = \u_7_segments.en_conmutador).
Adding EN signal on $flatten\u_7_segments.$procdff$522 ($adff) from module top_module (D = $flatten\u_7_segments.$add$../design/module_7_segments.v:38$329_Y, Q = \u_7_segments.en_conmutador).
Adding EN signal on $flatten\div_inst.$procdff$517 ($adff) from module top_module (D = $flatten\div_inst.$not$../design/module_freq_divider.sv:15$45_Y, Q = \div_inst.slow_clk).

10.7.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

10.7.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.
<suppressed ~3 debug messages>

10.7.7.9. Rerunning OPT passes. (Maybe there is more to do..)

10.7.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

10.7.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
    New ctrl vector for $pmux cell $flatten\u_arithmetic_fsm.$procmux$459: { $flatten\u_arithmetic_fsm.$procmux$462_CMP $flatten\u_arithmetic_fsm.$procmux$461_CMP }
  Optimizing cells in module \top_module.
Performed a total of 1 changes.

10.7.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

10.7.7.13. Executing OPT_DFF pass (perform DFF optimizations).

10.7.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

10.7.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.7.16. Rerunning OPT passes. (Maybe there is more to do..)

10.7.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

10.7.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.7.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.7.20. Executing OPT_DFF pass (perform DFF optimizations).

10.7.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.7.23. Finished OPT passes. (There is nothing left to do.)

10.7.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port top_module.$flatten\u_7_segments.$auto$mem.cc:319:emit$345 ($flatten\u_7_segments.$auto$proc_rom.cc:150:do_switch$343).
Removed top 28 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$div$../design/module_bin_to_bcd.v:18$334 ($div).
Removed top 25 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$div$../design/module_bin_to_bcd.v:19$336 ($div).
Removed top 22 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$div$../design/module_bin_to_bcd.v:20$338 ($div).
Removed top 28 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$mod$../design/module_bin_to_bcd.v:17$333 ($mod).
Removed top 28 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$mod$../design/module_bin_to_bcd.v:18$335 ($mod).
Removed top 28 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$mod$../design/module_bin_to_bcd.v:19$337 ($mod).
Removed top 28 bits (of 32) from port B of cell top_module.$flatten\u_bin_to_bcd.$mod$../design/module_bin_to_bcd.v:20$339 ($mod).
Removed top 1 bits (of 3) from port B of cell top_module.$auto$opt_dff.cc:195:make_patterns_logic$536 ($ne).
Removed top 1 bits (of 2) from port B of cell top_module.$flatten\u_7_segments.$procmux$444_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell top_module.$flatten\u_7_segments.$add$../design/module_7_segments.v:25$324 ($add).
Removed top 30 bits (of 32) from port Y of cell top_module.$flatten\u_7_segments.$add$../design/module_7_segments.v:25$324 ($add).
Removed top 1 bits (of 2) from port B of cell top_module.$flatten\u_arithmetic_fsm.$procmux$462_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell top_module.$flatten\div_inst.$add$../design/module_freq_divider.sv:18$46 ($add).
Removed top 16 bits (of 32) from port Y of cell top_module.$flatten\div_inst.$add$../design/module_freq_divider.sv:18$46 ($add).
Removed top 1 bits (of 16) from port B of cell top_module.$flatten\div_inst.$eq$../design/module_freq_divider.sv:14$44 ($eq).
Removed top 16 bits (of 32) from wire top_module.$flatten\div_inst.$add$../design/module_freq_divider.sv:18$46_Y.
Removed top 30 bits (of 32) from wire top_module.$flatten\u_7_segments.$add$../design/module_7_segments.v:25$324_Y.

10.7.9. Executing PEEPOPT pass (run peephole optimizers).

10.7.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

10.7.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top_module:
  creating $macc model for $flatten\div_inst.$add$../design/module_freq_divider.sv:18$46 ($add).
  creating $macc model for $flatten\u_7_segments.$add$../design/module_7_segments.v:25$324 ($add).
  creating $macc model for $flatten\u_7_segments.$add$../design/module_7_segments.v:38$329 ($add).
  creating $macc model for $flatten\u_7_segments.$sub$../design/module_7_segments.v:27$325 ($sub).
  creating $macc model for $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:63$16 ($add).
  creating $macc model for $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:67$18 ($add).
  creating $alu model for $macc $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:67$18.
  creating $alu model for $macc $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:63$16.
  creating $alu model for $macc $flatten\u_7_segments.$sub$../design/module_7_segments.v:27$325.
  creating $alu model for $macc $flatten\u_7_segments.$add$../design/module_7_segments.v:38$329.
  creating $alu model for $macc $flatten\u_7_segments.$add$../design/module_7_segments.v:25$324.
  creating $alu model for $macc $flatten\div_inst.$add$../design/module_freq_divider.sv:18$46.
  creating $alu cell for $flatten\div_inst.$add$../design/module_freq_divider.sv:18$46: $auto$alumacc.cc:485:replace_alu$550
  creating $alu cell for $flatten\u_7_segments.$add$../design/module_7_segments.v:25$324: $auto$alumacc.cc:485:replace_alu$553
  creating $alu cell for $flatten\u_7_segments.$add$../design/module_7_segments.v:38$329: $auto$alumacc.cc:485:replace_alu$556
  creating $alu cell for $flatten\u_7_segments.$sub$../design/module_7_segments.v:27$325: $auto$alumacc.cc:485:replace_alu$559
  creating $alu cell for $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:63$16: $auto$alumacc.cc:485:replace_alu$562
  creating $alu cell for $flatten\u_arithmetic_fsm.$add$../design/module_arithmetic_fsm.v:67$18: $auto$alumacc.cc:485:replace_alu$565
  created 6 $alu and 0 $macc cells.

10.7.12. Executing SHARE pass (SAT-based resource sharing).

10.7.13. Executing OPT pass (performing simple optimizations).

10.7.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
<suppressed ~8 debug messages>
Removed a total of 2 cells.

10.7.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

10.7.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.7.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.13.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

10.7.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.13.9. Rerunning OPT passes. (Maybe there is more to do..)

10.7.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

10.7.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.7.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.7.13.13. Executing OPT_DFF pass (perform DFF optimizations).

10.7.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.7.13.16. Finished OPT passes. (There is nothing left to do.)

10.7.14. Executing MEMORY pass.

10.7.14.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

10.7.14.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

10.7.14.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

10.7.14.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

10.7.14.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\u_7_segments.$auto$proc_rom.cc:150:do_switch$343'[0] in module `\top_module': no output FF found.
Checking read port address `$flatten\u_7_segments.$auto$proc_rom.cc:150:do_switch$343'[0] in module `\top_module': no address FF found.

10.7.14.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.14.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

10.7.14.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

10.7.14.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.7.14.10. Executing MEMORY_COLLECT pass (generating $mem cells).

10.7.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.8. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory top_module.$flatten\u_7_segments.$auto$proc_rom.cc:150:do_switch$343
<suppressed ~6 debug messages>

10.9. Executing TECHMAP pass (map to technology primitives).

10.9.1. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/lutrams_map.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__GOWIN_LUTRAM_'.
Successfully finished Verilog frontend.

10.9.2. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/brams_map.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__GOWIN_SP_'.
Generating RTLIL representation for module `\$__GOWIN_DP_'.
Generating RTLIL representation for module `\$__GOWIN_SDP_'.
Successfully finished Verilog frontend.

10.9.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

10.10. Executing OPT pass (performing simple optimizations).

10.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.
<suppressed ~10 debug messages>

10.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.10.3. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $flatten\u_bin_to_bcd.$procdff$521 ($adff) from module top_module (removing D path).
Handling const CLK on $flatten\u_7_segments.$procdff$523 ($adff) from module top_module (removing D path).
Handling const CLK on $auto$ff.cc:266:slice$545 ($adffe) from module top_module (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$545 ($dlatch) from module top_module.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$545 ($dlatch) from module top_module.
Setting constant 1-bit at position 0 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 1 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 2 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 3 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 4 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 5 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 6 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 7 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 8 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 9 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 10 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 11 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 12 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 13 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 1-bit at position 14 on $flatten\u_7_segments.$procdff$523 ($dlatch) from module top_module.
Setting constant 0-bit at position 0 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 1 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 2 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 3 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 4 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 5 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 6 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 7 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 8 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 9 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 10 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 11 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 12 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 13 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 14 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.
Setting constant 0-bit at position 15 on $flatten\u_bin_to_bcd.$procdff$521 ($dlatch) from module top_module.

10.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 12 unused cells and 24 unused wires.
<suppressed ~17 debug messages>

10.10.5. Rerunning OPT passes. (Removed registers in this run.)

10.10.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.
<suppressed ~5 debug messages>

10.10.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.10.8. Executing OPT_DFF pass (perform DFF optimizations).

10.10.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

10.10.10. Finished fast OPT passes.

10.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\u_7_segments.$auto$proc_rom.cc:150:do_switch$343 in module \top_module:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

10.12. Executing OPT pass (performing simple optimizations).

10.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.
<suppressed ~15 debug messages>

10.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

10.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.12.6. Executing OPT_DFF pass (perform DFF optimizations).

10.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

10.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.12.9. Rerunning OPT passes. (Maybe there is more to do..)

10.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

10.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top_module.
Performed a total of 0 changes.

10.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
Removed a total of 0 cells.

10.12.13. Executing OPT_DFF pass (perform DFF optimizations).

10.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..

10.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.12.16. Finished OPT passes. (There is nothing left to do.)

10.13. Executing TECHMAP pass (map to technology primitives).

10.13.1. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/techmap.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.13.2. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/arith_map.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gw1n_alu'.
Successfully finished Verilog frontend.

10.13.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_80_gw1n_alu for cells of type $alu.
Using template $paramod$466c1ff2c677f9c08ccf46d9467344bbd175f515\_80_gw1n_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$d066be84df89d36f73a08cc506728c5d3fb9157b\_80_gw1n_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~224 debug messages>

10.14. Executing OPT pass (performing simple optimizations).

10.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.
<suppressed ~124 debug messages>

10.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top_module'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

10.14.3. Executing OPT_DFF pass (perform DFF optimizations).

10.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 26 unused cells and 123 unused wires.
<suppressed ~27 debug messages>

10.14.5. Finished fast OPT passes.

10.15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port top_module.anodo_o using OBUF.
Mapping port top_module.catodo_o using OBUF.
Mapping port top_module.clk_i using IBUF.
Mapping port top_module.col_out using OBUF.
Mapping port top_module.finish_input using IBUF.
Mapping port top_module.new_input using IBUF.
Mapping port top_module.num1_hex using IBUF.
Mapping port top_module.num2_hex using IBUF.
Mapping port top_module.row_in using IBUF.
Mapping port top_module.rst_i using IBUF.
Mapping port top_module.sum_result using OBUF.

10.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top_module..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

10.17. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

10.18. Executing TECHMAP pass (map to technology primitives).

10.18.1. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

10.18.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
No more expansions possible.
<suppressed ~72 debug messages>

10.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top_module.

10.20. Executing SIMPLEMAP pass (map simple cells to gate primitives).

10.21. Executing ABC pass (technology mapping using ABC).

10.21.1. Extracting gate netlist of module `\top_module' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 150 wires to a netlist network with 63 inputs and 48 outputs.

10.21.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.21.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       52
ABC RESULTS:        internal signals:       39
ABC RESULTS:           input signals:       63
ABC RESULTS:          output signals:       48
Removing temp directory.
Removed 0 unused cells and 398 unused wires.

10.22. Executing TECHMAP pass (map to technology primitives).

10.22.1. Executing Verilog-2005 frontend: C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v
Parsing Verilog input from `C:\FPGA\OSS-CA~1\bin\../share/yosys/gowin/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

10.22.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$8e224a63a74b6daf8fc2e441cb0688a65e7a4073\$lut for cells of type $lut.
Using template $paramod$fccccf8bb2add7667329c686feec7546eb9a3ae3\$lut for cells of type $lut.
Using template $paramod$a56d70ffd309b1185b27bc1a5092003d8bf696be\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod$a8cb9dc6eccb911035b7155b3fa8bdcdb987b386\$lut for cells of type $lut.
Using template $paramod$9664483609d9e726df9697364de1aad825ad3979\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~223 debug messages>

10.23. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in top_module.
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1352.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1345.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1348.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1358.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1355.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1347.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1356.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1354.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1353.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1357.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1359.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1349.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1346.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1344.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1350.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)
  Optimizing lut $abc$1323$auto$blifparse.cc:525:parse_blif$1351.genblk1.genblk1.genblk1.genblk1.genblk1.lut0 (4 -> 0)

10.24. Executing SETUNDEF pass (replace undef values with defined constants).

10.25. Executing HILOMAP pass (mapping to constant drivers).
Removed 0 unused cells and 131 unused wires.

10.26. Executing AUTONAME pass.
Renamed 907 objects in module top_module (13 iterations).
<suppressed ~311 debug messages>

10.27. Executing HIERARCHY pass (managing design hierarchy).

10.27.1. Analyzing design hierarchy..
Top module:  \top_module

10.27.2. Analyzing design hierarchy..
Top module:  \top_module
Removed 0 unused modules.

10.28. Printing statistics.

=== top_module ===

   Number of wires:                138
   Number of wire bits:            506
   Number of public wires:         138
   Number of public wire bits:     506
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                223
     ALU                            42
     DFFC                           19
     DFFCE                          29
     DFFP                            1
     GND                             1
     IBUF                           32
     LUT1                           17
     LUT2                            2
     LUT4                           35
     MUX2_LUT5                      16
     OBUF                           28
     VCC                             1

10.29. Executing CHECK pass (checking for obvious problems).
Checking module top_module...
Found and reported 0 problems.

10.30. Executing JSON backend.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 662b86969b
Yosys 0.26+1 (git sha1 b1a011138, x86_64-w64-mingw32-g++ 9.2.1 -Os)
Time spent: 1% 20x opt_expr (0 sec), 1% 19x opt_clean (0 sec), ...
